import cdsapi
from dateutil.rrule import rrule, MONTHLY
import datetime
from time import time as timer

"""
Download ERA5 output for NemoNordic reference hindcast runs.

Grid used in Nemo 3.6 forecast:

 lat = 82 ;
 lat = 66.15, 65.925, 65.7, 65.475, 65.25, 65.025, 64.8, 64.575, 64.35,
    64.125, 63.9, 63.675, 63.45, 63.225, 63, 62.775, 62.55, 62.325, 62.1,
    61.875, 61.65, 61.425, 61.2, 60.975, 60.75, 60.525, 60.3, 60.075, 59.85,
    59.625, 59.4, 59.175, 58.95, 58.725, 58.5, 58.275, 58.05, 57.825, 57.6,
    57.375, 57.15, 56.925, 56.7, 56.475, 56.25, 56.025, 55.8, 55.575, 55.35,
    55.125, 54.9, 54.675, 54.45, 54.225, 54, 53.775, 53.55, 53.325, 53.1,
    52.875, 52.65, 52.425, 52.2, 51.975, 51.75, 51.525, 51.3, 51.075, 50.85,
    50.625, 50.4, 50.175, 49.95, 49.725, 49.5, 49.275, 49.05, 48.825, 48.6,
    48.375, 48.15, 47.925 ;
 d_lat = 0.225 ;

 lon = 162 ;
 lon = -5.175, -4.95, -4.725, -4.5, -4.275, -4.05, -3.825, -3.6, -3.375,
    -3.15, -2.925, -2.7, -2.475, -2.25, -2.025, -1.8, -1.575, -1.35, -1.125,
    -0.9, -0.675, -0.45, -0.225, 0, 0.225, 0.45, 0.675, 0.9, 1.125, 1.35,
    1.575, 1.8, 2.025, 2.25, 2.475, 2.7, 2.925, 3.15, 3.375, 3.6, 3.825,
    4.05, 4.275, 4.5, 4.725, 4.95, 5.175, 5.4, 5.625, 5.85, 6.075, 6.3,
    6.525, 6.75, 6.975, 7.2, 7.425, 7.65, 7.875, 8.1, 8.325, 8.55, 8.775, 9,
    9.225, 9.45, 9.675, 9.9, 10.125, 10.35, 10.575, 10.8, 11.025, 11.25,
    11.475, 11.7, 11.925, 12.15, 12.375, 12.6, 12.825, 13.05, 13.275, 13.5,
    13.725, 13.95, 14.175, 14.4, 14.625, 14.85, 15.075, 15.3, 15.525, 15.75,
    15.975, 16.2, 16.425, 16.65, 16.875, 17.1, 17.325, 17.55, 17.775, 18,
    18.225, 18.45, 18.675, 18.9, 19.125, 19.35, 19.575, 19.8, 20.025, 20.25,
    20.475, 20.7, 20.925, 21.15, 21.375, 21.6, 21.825, 22.05, 22.275, 22.5,
    22.725, 22.95, 23.175, 23.4, 23.625, 23.85, 24.075, 24.3, 24.525, 24.75,
    24.975, 25.2, 25.425, 25.65, 25.875, 26.1, 26.325, 26.55, 26.775, 27,
    27.225, 27.45, 27.675, 27.9, 28.125, 28.35, 28.575, 28.8, 29.025, 29.25,
    29.475, 29.7, 29.925, 30.15, 30.375, 30.6, 30.825, 31.05 ;
 d_lon = 0.225 ;

FMI forecast has resolution:

 latitude = 161 ;
 latitude = 66, 65.8875, 65.775, 65.6625, 65.55, 65.4375, 65.325, 65.2125, 
    65.1, 64.9875, 64.875, 64.7625, 64.65, 64.5375, 64.425, 64.3125, 64.2, 
    64.0875, 63.975, 63.8625, 63.75, 63.6375, 63.525, 63.4125, 63.3, 63.1875, 
    63.075, 62.9625, 62.85, 62.7375, 62.625, 62.5125, 62.4, 62.2875, 62.175, 
    62.0625, 61.95, 61.8375, 61.725, 61.6125, 61.5, 61.3875, 61.275, 61.1625, 
    61.05, 60.9375, 60.825, 60.7125, 60.6, 60.4875, 60.375, 60.2625, 60.15, 
    60.0375, 59.925, 59.8125, 59.7, 59.5875, 59.475, 59.3625, 59.25, 59.1375, 
    59.025, 58.9125, 58.8, 58.6875, 58.575, 58.4625, 58.35, 58.2375, 58.125, 
    58.0125, 57.9, 57.7875, 57.675, 57.5625, 57.45, 57.3375, 57.225, 57.1125, 
    57, 56.8875, 56.775, 56.6625, 56.55, 56.4375, 56.325, 56.2125, 56.1, 
    55.9875, 55.875, 55.7625, 55.65, 55.5375, 55.425, 55.3125, 55.2, 55.0875, 
    54.975, 54.8625, 54.75, 54.6375, 54.525, 54.4125, 54.3, 54.1875, 54.075, 
    53.9625, 53.85, 53.7375, 53.625, 53.5125, 53.4, 53.2875, 53.175, 53.0625, 
    52.95, 52.8375, 52.725, 52.6125, 52.5, 52.3875, 52.275, 52.1625, 52.05, 
    51.9375, 51.825, 51.7125, 51.6, 51.4875, 51.375, 51.2625, 51.15, 51.0375, 
    50.925, 50.8125, 50.7, 50.5875, 50.475, 50.3625, 50.25, 50.1375, 50.025, 
    49.9125, 49.8, 49.6875, 49.575, 49.4625, 49.35, 49.2375, 49.125, 49.0125, 
    48.9, 48.7875, 48.675, 48.5625, 48.45, 48.3375, 48.225, 48.1125, 48 ;
 d_lat = 0.1125 ;

 longitude = 175 ;
 longitude = -5, -4.793103, -4.586207, -4.37931, -4.172414, -3.965517, 
    -3.758621, -3.551724, -3.344828, -3.137931, -2.931035, -2.724138, 
    -2.517241, -2.310345, -2.103448, -1.896552, -1.689655, -1.482759, 
    -1.275862, -1.068966, -0.862069, -0.6551724, -0.4482759, -0.2413793, 
    -0.03448276, 0.1724138, 0.3793103, 0.5862069, 0.7931035, 1, 1.206897, 
    1.413793, 1.62069, 1.827586, 2.034483, 2.241379, 2.448276, 2.655172, 
    2.862069, 3.068965, 3.275862, 3.482759, 3.689655, 3.896552, 4.103448, 
    4.310345, 4.517241, 4.724138, 4.931035, 5.137931, 5.344828, 5.551724, 
    5.758621, 5.965517, 6.172414, 6.37931, 6.586207, 6.793103, 7, 7.206897, 
    7.413793, 7.62069, 7.827586, 8.034483, 8.24138, 8.448276, 8.655172, 
    8.862069, 9.068966, 9.275862, 9.482759, 9.689655, 9.896552, 10.10345, 
    10.31034, 10.51724, 10.72414, 10.93103, 11.13793, 11.34483, 11.55172, 
    11.75862, 11.96552, 12.17241, 12.37931, 12.58621, 12.7931, 13, 13.2069, 
    13.41379, 13.62069, 13.82759, 14.03448, 14.24138, 14.44828, 14.65517, 
    14.86207, 15.06897, 15.27586, 15.48276, 15.68966, 15.89655, 16.10345, 
    16.31034, 16.51724, 16.72414, 16.93103, 17.13793, 17.34483, 17.55172, 
    17.75862, 17.96552, 18.17241, 18.37931, 18.58621, 18.7931, 19, 19.2069, 
    19.41379, 19.62069, 19.82759, 20.03448, 20.24138, 20.44828, 20.65517, 
    20.86207, 21.06897, 21.27586, 21.48276, 21.68966, 21.89655, 22.10345, 
    22.31034, 22.51724, 22.72414, 22.93103, 23.13793, 23.34483, 23.55172, 
    23.75862, 23.96552, 24.17241, 24.37931, 24.58621, 24.7931, 25, 25.2069, 
    25.41379, 25.62069, 25.82759, 26.03448, 26.24138, 26.44828, 26.65517, 
    26.86207, 27.06897, 27.27586, 27.48276, 27.68966, 27.89655, 28.10345, 
    28.31034, 28.51724, 28.72414, 28.93103, 29.13793, 29.34483, 29.55172, 
    29.75862, 29.96552, 30.17241, 30.37931, 30.58621, 30.7931, 31 ;
 d_lon = 0.20689655172413793
"""


def get_month(year, month, filename=None):
    """
    Download one month of ERA5 single level data.
    """
    year_str = str(int(year))
    month_str = '{:02d}'.format(int(month))
    variables = [
        '10m_u_component_of_wind',
        '10m_v_component_of_wind',
        '2m_dewpoint_temperature',
        '2m_temperature',
        'snowfall',
        'surface_pressure',
        'surface_solar_radiation_downwards',
        'surface_thermal_radiation_downward_clear_sky',
        'total_precipitation',
    ]
    # ['01', '02, ..., '31']
    days = ['{:02d}'.format(day) for day in range(1, 32)]
    # ['00:00', '01:00', ..., '23:00']
    times = ['{:02d}:00'.format(hour) for hour in range(24)]
    # area bounds: North, West, South, East. None => global
    #area = [66.15, -5.175, 47.925, 31.05]
    area = [66, -5, 48, 31]
    # lat/lon grid resolution; None => Native 0.25 x 0.25 for atm
    # grid = [0.225, 0.225]
    grid = [0.20689655172413793, 0.1125]
    if filename is None:
        filename = 'reanalysis-era5_{:}-{:}.nc'.format(year_str, month_str)

    c = cdsapi.Client()
    c.retrieve(
        'reanalysis-era5-single-levels',
        {
            'product_type':'reanalysis',
            'format':'netcdf',
            'variable':variables,
            'year': year_str,
            'month': month_str,
            'day': days,
            'time': times,
            'area': area,
            'grid': grid,
        },
        filename)


start_month = datetime.datetime(2014, 10, 1)
end_month = datetime.datetime(2015, 10, 1)

for date in rrule(MONTHLY, dtstart=start_month, until=end_month):
    print('\nFetching {:}'.format(date.strftime('%Y-%m')))
    tic = timer()
    get_month(date.year, date.month)
    toc = timer()
    duration = datetime.timedelta(seconds=toc - tic)
    print('Duration: {:}'.format(duration))
